/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface DdexSequencerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DATA_PROVIDERS_WHITELIST"
      | "UPGRADE_INTERFACE_VERSION"
      | "VALIDATORS_WHITELIST"
      | "blobQueueHead"
      | "blobQueueTail"
      | "blobs"
      | "ddexEmitter"
      | "initialize"
      | "moveQueue"
      | "owner"
      | "proxiableUUID"
      | "renounceOwnership"
      | "setDdexEmitter"
      | "setWhitelistingStatus"
      | "submitNewBlob"
      | "submitProof"
      | "transferOwnership"
      | "upgradeToAndCall"
      | "whitelists"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "NewBlobSubmitted"
      | "OwnershipTransferred"
      | "Upgraded"
      | "WhitelistChanged"
      | "WhitelistingStatusChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DATA_PROVIDERS_WHITELIST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALIDATORS_WHITELIST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blobQueueHead",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blobQueueTail",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "blobs", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "ddexEmitter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "moveQueue", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDdexEmitter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistingStatus",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "submitNewBlob",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitProof",
    values: [BytesLike, BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelists",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DATA_PROVIDERS_WHITELIST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATORS_WHITELIST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blobQueueHead",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blobQueueTail",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "blobs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ddexEmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "moveQueue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDdexEmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistingStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitNewBlob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whitelists", data: BytesLike): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewBlobSubmittedEvent {
  export type InputTuple = [commitment: BytesLike, image_id: BytesLike];
  export type OutputTuple = [commitment: string, image_id: string];
  export interface OutputObject {
    commitment: string;
    image_id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WhitelistChangedEvent {
  export type InputTuple = [
    _whitelistId: BytesLike,
    _previousAddress: AddressLike,
    _newAddress: AddressLike
  ];
  export type OutputTuple = [
    _whitelistId: string,
    _previousAddress: string,
    _newAddress: string
  ];
  export interface OutputObject {
    _whitelistId: string;
    _previousAddress: string;
    _newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WhitelistingStatusChangedEvent {
  export type InputTuple = [current_status: boolean];
  export type OutputTuple = [current_status: boolean];
  export interface OutputObject {
    current_status: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DdexSequencer extends BaseContract {
  connect(runner?: ContractRunner | null): DdexSequencer;
  waitForDeployment(): Promise<this>;

  interface: DdexSequencerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DATA_PROVIDERS_WHITELIST: TypedContractMethod<[], [string], "view">;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  VALIDATORS_WHITELIST: TypedContractMethod<[], [string], "view">;

  blobQueueHead: TypedContractMethod<[], [string], "view">;

  blobQueueTail: TypedContractMethod<[], [string], "view">;

  blobs: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, boolean, string, string, string] & {
        nextBlob: string;
        submitted: boolean;
        proposer: string;
        blobId: string;
        imageId: string;
      }
    ],
    "view"
  >;

  ddexEmitter: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [
      dataProvidersWhitelist: AddressLike,
      validatorsWhitelist: AddressLike,
      stakeVaultAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  moveQueue: TypedContractMethod<[], [void], "nonpayable">;

  owner: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setDdexEmitter: TypedContractMethod<
    [_ddexEmitter: AddressLike],
    [void],
    "nonpayable"
  >;

  setWhitelistingStatus: TypedContractMethod<
    [_disabled: boolean],
    [void],
    "nonpayable"
  >;

  submitNewBlob: TypedContractMethod<
    [_imageId: BytesLike, _commitment: BytesLike, _blobSha2: BytesLike],
    [void],
    "nonpayable"
  >;

  submitProof: TypedContractMethod<
    [_imageId: BytesLike, _journal: BytesLike, _seal: BytesLike, _cid: string],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  whitelists: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DATA_PROVIDERS_WHITELIST"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VALIDATORS_WHITELIST"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "blobQueueHead"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "blobQueueTail"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "blobs"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, boolean, string, string, string] & {
        nextBlob: string;
        submitted: boolean;
        proposer: string;
        blobId: string;
        imageId: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "ddexEmitter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      dataProvidersWhitelist: AddressLike,
      validatorsWhitelist: AddressLike,
      stakeVaultAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "moveQueue"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDdexEmitter"
  ): TypedContractMethod<[_ddexEmitter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWhitelistingStatus"
  ): TypedContractMethod<[_disabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitNewBlob"
  ): TypedContractMethod<
    [_imageId: BytesLike, _commitment: BytesLike, _blobSha2: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitProof"
  ): TypedContractMethod<
    [_imageId: BytesLike, _journal: BytesLike, _seal: BytesLike, _cid: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "whitelists"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "NewBlobSubmitted"
  ): TypedContractEvent<
    NewBlobSubmittedEvent.InputTuple,
    NewBlobSubmittedEvent.OutputTuple,
    NewBlobSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "WhitelistChanged"
  ): TypedContractEvent<
    WhitelistChangedEvent.InputTuple,
    WhitelistChangedEvent.OutputTuple,
    WhitelistChangedEvent.OutputObject
  >;
  getEvent(
    key: "WhitelistingStatusChanged"
  ): TypedContractEvent<
    WhitelistingStatusChangedEvent.InputTuple,
    WhitelistingStatusChangedEvent.OutputTuple,
    WhitelistingStatusChangedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "NewBlobSubmitted(bytes,bytes32)": TypedContractEvent<
      NewBlobSubmittedEvent.InputTuple,
      NewBlobSubmittedEvent.OutputTuple,
      NewBlobSubmittedEvent.OutputObject
    >;
    NewBlobSubmitted: TypedContractEvent<
      NewBlobSubmittedEvent.InputTuple,
      NewBlobSubmittedEvent.OutputTuple,
      NewBlobSubmittedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "WhitelistChanged(bytes1,address,address)": TypedContractEvent<
      WhitelistChangedEvent.InputTuple,
      WhitelistChangedEvent.OutputTuple,
      WhitelistChangedEvent.OutputObject
    >;
    WhitelistChanged: TypedContractEvent<
      WhitelistChangedEvent.InputTuple,
      WhitelistChangedEvent.OutputTuple,
      WhitelistChangedEvent.OutputObject
    >;

    "WhitelistingStatusChanged(bool)": TypedContractEvent<
      WhitelistingStatusChangedEvent.InputTuple,
      WhitelistingStatusChangedEvent.OutputTuple,
      WhitelistingStatusChangedEvent.OutputObject
    >;
    WhitelistingStatusChanged: TypedContractEvent<
      WhitelistingStatusChangedEvent.InputTuple,
      WhitelistingStatusChangedEvent.OutputTuple,
      WhitelistingStatusChangedEvent.OutputObject
    >;
  };
}
